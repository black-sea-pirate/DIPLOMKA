/* ---------------------------------------------------------------------------
 * src/api/index.js
 *
 * Централизованный axios-инстанс для всего проекта.
 * Сейчас файл работает в «офлайн-режиме» (без реального бекенда):
 *   • baseURL уже указан, чтобы потом просто убрать заглушки и начать
 *     отправлять настоящие HTTP-запросы.
 *   • Метод api.post(!) перезаписан фейковым промисом с задержкой —
 *     имитирует round-trip к серверу.
 * При подключении бекенда ↓SECTION:MOCK будет удалена целиком.
 * ------------------------------------------------------------------------ */

import axios from "axios"; // axios — HTTP-клиент (Promise-базовый)

// Создаём «инстанс» (отдельный экземпляр с собственной настройкой)
// Все компоненты проекта импортируют **этот** объект →
//   единственная точка, где меняется baseURL, интерсепторы и т.п.
const api = axios.create({
  /* URL сервера. Когда FastAPI будет поднят на 8000 — эта строка останется
     неизменной; если порт/хост сменится — правим ТОЛЬКО тут. */
  baseURL: "http://localhost:8000",
});

/* == SECTION:MOCK ==========================================================
 * Ниже мы *полностью* переопределяем метод api.post.  Вместо реального fetch
 * он возвращает Promise, который резолвится через ~0.8 с.
 *
 *  • data.id = Date.now() — даём уникальный id, чтобы UI мог отрисовать
 *    новую строку «материала» или «теста».
 *  • cfg (конфиг запроса) сейчас не используется, но оставлен для совместимости
 *    с реальным сигнатурой axios.post(url, data, config).
 *
 * КОГДА появится бекенд, удаляем весь блок и *НЕ* трогаем остальную часть
 * файла — все вызовы api.post начнут работать “по-настоящему”.
 * ------------------------------------------------------------------------ */
api.post = (url, data, cfg = {}) =>
  new Promise((resolve) => {
    // setTimeout симулирует сетевую задержку
    setTimeout(() => {
      resolve({
        data: {
          ok: true, // признак успеха (мимикрия ответа сервера)
          id: Date.now(), // уникальный id — как будто вернул сервер
        },
      });
    }, 800); // 800 мс — субъективно «чувствуется» как небольшой запрос
  });
/* ======================================================================== */

export default api;
// Импортируем так:  import api from '@/api'
//
// Плюс: если когда-нибудь понадобится, можно создать второй инстанс
//       (например, для запросов к стороннему сервису) и это не
//       повлияет на основной api.
